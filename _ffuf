#compdef ffuf

local -a args multiwordlist_modes output_formats http_methods http_codes

args=(
	'-u[Target URL]:enter URL:()'
	'*-w[Wordlist and (optional) keyword in format wordlist\[:keyword\]]:select file:_files'
	'-mode[Multi-wordlist operation mode (default: clusterbomb)]:select mode:_values mode $multiwordlist_modes'
	'*-H[HTTP header in format "Name: Value". Multiple -H flags are accepted]:enter header:()'
	'-X[HTTP method to use (default: GET)]:select method:_values http_method $http_methods'
	'-b[Cookie data in format "name1=value1; name2=value2"]:enter cookie:()'
	'-d[POST data]:enter POST data:()'
	'-r[Follow redirects (default: false)]'
	'-x[HTTP Proxy URL]:enter proxy:()'
	'-timeout[HTTP request timeout in seconds (default: 10)]:enter timeout:()'
	'-p[Seconds of delay between requests, or a range for random delay (e.g. 0.1 or 0.1-2.0)]:enter delay:()'
	'-t[Number of concurrent threads (default: 40)]:enter number of threads:()'
	'-v[Verbose output, printing full URL and redirect location (if any) with the results (default: false)]'
	'-recursion[Scan recursively. Only FUZZ keyword is supported, and URL (-u) has to end in it (default: false)]'
	'-recursion-depth[Maximum recursion depth (default: 0)]:enter depth:()'
	'-ac[Automatically calibrate filtering options (default: false)]'
	'-maxtime[Maximum running time in seconds (default: 0)]:enter time:()'
	'-s[Do not print additional information (default: false)]'
	'-mc[Match HTTP status codes, or "all" for everything (default: 200,204,301,302,307,401,403)]:select codes:_values -s ',' http_codes $http_codes'
	'-ml[Match amount of lines in response]:enter amount of lines:()'
	'-mr[Match regexp]:enter regexp:()'
	'-ms[Match HTTP response size]:enter size:()'
	'-mw[Match amount of words in response]:enter amount of words:()'
	'-fc[Filter by HTTP status codes in response. Comma separated list of codes and ranges]:select codes:_values -s ',' http_codes $http_codes'
	'-fl[Filter by amount of lines in response. Comma separated list of line counts and ranges]:enter amount of lines:()'
	'-fr[Filter by regexp in response]:enter regexp:()'
	'-fs[Filter by HTTP response size. Comma separated list of sizes and ranges]:enter size:()'
	'-fw[Filter by amount of words in response. Comma separated list of word counts and ranges]:enter amount of words:()'
	'-e[Comma separated list of extensions. Extends FUZZ keyword]:enter extensions:()'
	'-ic[Ignore wordlist comments (default: false)]'
	'-request[File containing the raw http request]:select file:_files'
	'-o[Write output to file]:select file:_files -X "Select output file or enter filename manually"'
	'-of[Output file format (default: json)]:select format:_values format $output_formats'
	'-replay-proxy[Replay matched requests using this proxy]'
	'-acc[Custom auto-calibration string. Can be used multiple times. Implies -ac]:enter calibration string:()'
	'-c[Colorize output (default: false)]'
	'-sa[Stop on all error cases. Implies -sf and -se (default: false)]'
	'-se[Stop on spurious errors (default: false)]'
	'-sf[Stop when > 95% of responses return 403 Forbidden (default: false)]'
	'-D[DirSearch wordlist compatibility mode. Used in conjunction with -e flag (default: false)]'
	'-input-cmd[Command producing the input. --input-num is required when using this input method. Overrides -w]:enter command:()'
	'-input-num[Number of inputs to test. Used in conjunction with --input-cmd (default: 100)]:enter amount:()'
	'-request-proto[Protocol to use along with raw request (default: https)]:enter protocol:()'
	'-debug-log[Write all of the internal logging to the specified file]:select logfile:_files -X "Select output file or enter filename manually"'
	'-od[Directory path to store matched results to]:select dir:_files -/'
)

multiwordlist_modes=('pitchfork' 'clusterbomb')
output_formats=('json' 'ejson' 'html' 'md' 'csv' 'ecsv')
http_methods=('OPTIONS' 'GET' 'HEAD' 'POST' 'PUT' 'PATCH' 'DELETE' 'TRACE' 'CONNECT')

http_codes=(
	'100[Continue]'
	'101[Switching Protocols]'
	'102[Processing]'
	'200[OK]'
	'201[Created]'
	'202[Accepted]'
	'203[Non-Authoritative Information]'
	'204[No Content]'
	'205[Reset Content]'
	'206[Partial Content]'
	'207[Multi-Status]'
	'208[Already Reported]'
	'226[IM Used]'
	'300[Multiple Choices]'
	'301[Moved Permanently]'
	'302[Found]'
	'303[See Other]'
	'304[Not Modified]'
	'305[Use Proxy]'
	'307[Temporary Redirect]'
	'308[Permanent Redirect]'
	'400[Bad Request]'
	'401[Unauthorized]'
	'402[Payment Required]'
	'403[Forbidden]'
	'404[Not Found]'
	'405[Method Not Allowed]'
	'406[Not Acceptable]'
	'407[Proxy Authentication Required]'
	'408[Request Timeout]'
	'409[Conflict]'
	'410[Gone]'
	'411[Length Required]'
	'412[Precondition Failed]'
	'413[Payload Too Large]'
	'414[URI Too Long]'
	'415[Unsupported Media Type]'
	'416[Range Not Satisfiable]'
	'417[Expectation Failed ]'
	'418[Iâ€™m a teapot]'
	'419[Authentication Timeout]'
	'421[Misdirected Request]'
	'422[Unprocessable Entity]'
	'423[Locked]'
	'424[Failed Dependency]'
	'426[Upgrade Required]'
	'428[Precondition Required]'
	'429[Too Many Requests]'
	'431[Request Header Fields Too Large]'
	'449[Retry With]'
	'451[Unavailable For Legal Reasons]'
	'499[Client Closed Request]'
	'500[Internal Server Error]'
	'501[Not Implemented]'
	'502[Bad Gateway]'
	'503[Service Unavailable]'
	'504[Gateway Timeout]'
	'505[HTTP Version Not Supported]'
	'506[Variant Also Negotiates]'
	'507[Insufficient Storage]'
	'508[Loop Detected]'
	'509[Bandwidth Limit Exceeded ]'
	'510[Not Extended]'
	'511[Network Authentication Required]'
	'520[Unknown Error]'
	'521[Web Server Is Down]'
	'522[Connection Timed Out]'
	'523[Origin Is Unreachable]'
	'524[A Timeout Occurred]'
	'525[SSL Handshake Failed]'
	'526[Invalid SSL Certificate]'
)

_arguments $args
