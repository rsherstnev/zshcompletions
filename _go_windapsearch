#compdef go-windapsearch

local -a args modules

args=(
    '(-d --domain)'{-d,--domain}'[The FQDN of the domain (e.g. "lab.example.com"). Only needed if dc not provided]:enter domain:()'
    '--dc[The Domain Controller to query against]:enter DC:()'
    '(-u --username)'{-u,--username}'[The full username with domain to bind with, if not specified, will attempt anonymous bind]:enter username:()'
    '(-p --password)'{-p,--password}'[Password to use. If not specified, will be prompted for]:enter password:()'
    '--hash[NTLM Hash to use instead of password (i.e. pass-the-hash)]:enter hash:()'
    '--ntlm[Use NTLM auth (automatic if hash is set)]'
    '--port[Port to connect to (if non standard)]:enter port:()'
    '--secure[Use LDAPS. This will not verify TLS certs, however. (default: false)]'
    '--proxy[SOCKS5 Proxy to use (e.g. 127.0.0.1:9050)]:enter proxy address:()'
    '--full[Output all attributes from LDAP]'
    '(-o --output)'{-o,--output}'[Save results to file]:select file:_files'
    '(-j --json)'{-j,--json}'[Convert LDAP output to JSON]'
    '--page-size[LDAP page size to use (default 1000)]:enter page size:()'
    '--version[Show version info and exit]'
    '(-v --verbose)'{-v,--verbose}'[Show info logs]'
    '--debug[Show debug logs]'
    '(-h --help)'{-h,--help}'[Show this help]'
    '(-m --module)'{-m,--module}'[Module to use]:select module:_values module $modules'
)

modules=(
    'admin-objects[Enumerate all objects with protected ACLs (i.e admins)]'
    'computers[Enumerate AD Computers]'
    'custom[Run a custom LDAP syntax filter]'
    'domain-admins[Recursively list all users objects in Domain Admins group]'
    'gpos[Enumerate Group Policy Objects]'
    'groups[List all AD groups]'
    'members[Query for members of a group]'
    'metadata[Print LDAP server metadata]'
    'privileged-users[Recursively list members of all highly privileged groups]'
    'search[Perform an ANR Search and return the results]'
    'unconstrained[Find objects that allow unconstrained delegation]'
    'user-spns[Enumerate all users objects with Service Principal Names (for kerberoasting)]'
    'users[List all user objects]'
)

_arguments $args